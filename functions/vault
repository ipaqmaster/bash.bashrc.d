#!/bin/bash

# Make assumption of vault server if VAULT_ADDR is unset and domain is set.
if [ -z "${VAULT_ADDR}" ] && [[ "$(hostnamectl hostname)" == *"."* ]]
then
  export VAULT_ADDR=https://vault.$(cut -f2- -d'.' <(hostnamectl hostname))
fi


function printObscured {
  # Prints given arguments with red text and a red background for copy pasting in a desktop environment terminal
  echo -e "\t >\e[${colors[Red]};$(((${colors[Red]} + 10)))m${@}\e[${colors[none]}m<"
}

# readVault
#   Read a secret from vault and echo it out for script usage or print it to a terminal with printObscured

# readVaultClipboard
#   Read a vault secret and store the result in xclip, otherwise print it to a terminal with printObscured
#   Make sure to include the key to read out for a kv secret.

#   Examples for both:
##    readVaultClipboard kv/gmail email
##    readVaultClipboard kv/gmail password
##    readVaultClipboard totp/code/google

function readVault {
  if [[ "$1" == *"totp"* ]]
  then
    vaultJqPattern='.data.code'
    vaultArgs='read'
  else
    if [ -z "${2}" ]
    then
      echo "Need a second argument for which Key of the secret to print" >&2
      return 1
    fi
    vaultJqPattern=".data.data.${2}"
    vaultArgs='kv get'
  fi
  vaultResult="$(vault ${vaultArgs} -format json ${1})"
  vaultExitCode=$?

  if [ ${vaultExitCode} -eq 0 ]
  then
    echo -e "OK\t- Vault read" >&2
    vaultResultStripped=$(jq -jr "${vaultJqPattern}" <<< "${vaultResult}")
    if [ "${vaultResultStripped}" == "null" ]
      then
        echo -e "WARN\t- key '${2}' gave null value in secret ${1}" >&2
    fi
    if [ -t 1 ] # Use printObscured if this is a terminal (Human interaction). Otherwise just echo and return.
    then
      printObscured "${vaultResultStripped}"
    else
      echo "${vaultResultStripped}"
    fi
    unset vaultResultStripped vaultResult
    return
  else
    echo -e "ERR\t- reading vault!" >&2
    return 1
  fi
}

function readVaultClipboard {

  result="$(readVault "${@}")" || return $?

  if [ -z "${DISPLAY}" ]
  then
    echo -e "WARN\t- DISPLAY variable unset. Printing below:" >&2
    printObscured "${result}"
    return 1
  elif ! which xclip >/dev/null 2>&1
  then
    echo -e "WARN\t- Can't find xclip in PATH. Printing below:" >&2
    printObscured "${result}"
    return 1
  fi

  if xclip -r -sel clip <<< "${result}"
  then
    echo -e "OK\t- sent to clipboard" >&2
    unset result
    return 0
  else
    echo -e "ERR\t- Something went wrong trying to xclip the result. Printing below:" >&2
    printObscured ${result}
    return 2
  fi
}
