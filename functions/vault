#!/bin/bash

# Make assumption of vault server if VAULT_ADDR is unset and domain is set.
if [ -z "${VAULT_ADDR}" ] && [[ "$(hostnamectl hostname)" == *"."* ]]
then
  export VAULT_ADDR=https://vault.$(cut -f2- -d'.' <(hostnamectl hostname))
fi

  # Read a vault secret and store the result in the clipboard via xclip.
  # Make sure to include the key to read out for a kv secret.



function printObscured {
  # Prints given arguments with red text and a red background for copy pasting in a desktop environment terminal
  echo -e "\t >\e[${colors[Red]};$(((${colors[Red]} + 10)))m${@}\e[${colors[none]}m<"
}


# Examples
## readVaultClipboard kv/gmail email
## readVaultClipboard kv/gmail password
## readVaultClipboard totp/code/google
function readVaultClipboard {
  if [[ "$1" == *"totp"* ]]
  then
    jqpattern='.data.code'
    vaultargs='read'
  else
    [ -z "$2" ] && { echo "Need a second argument for which Key to read of secret" ; return 1 ;}
    jqpattern=".data.data.$2"
    vaultargs='kv get'
  fi
  vaultResult="$(vault $vaultargs -format json $1)"
  vaultExitCode=$?

  if [ $vaultExitCode -eq 0 ]
  then
    stripResult=$(jq -jr "$jqpattern" <<< "${vaultResult}")
  else
    echo "ERR reading vault!"
  fi

  if [ -z "$DISPLAY" ]
  then
    echo "WARN - DISPLAY variable unset. Printing below:"
    printObscured "${stripResult}"
    return 1
  elif ! which xclip >/dev/null 2>&1
  then
    echo "WARN - Can't find xclip in PATH. Printing below:"
    printObscured "${stripResult}"
    return 1
  fi

  if xclip -r -sel clip <<< "${stripResult}"
  then
    echo "OK - sent to clipboard" >&2
    unset stripResult
    return 0
  else
    echo "ERR - Something went wrong trying to xclip the result. Printing below:" >&2
    printObscured ${stripResult}
    return 2
  fi
}
